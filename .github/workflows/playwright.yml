name: Playwright Tests
on:
  push:
    branches: [main, feature/**, test/**]
  pull_request:
    branches: [main, feature/**, test/**]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test
        env:
          CI: true

      - name: Verify test results
        run: |
          if [ ! -f results.xml ]; then
            echo "Error: Test results file not found!"
            exit 1
          fi

      - name: Upload Playwright JUnit Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-junit-results
          path: results.xml
          retention-days: 30

      - name: Get Xray API Token
        run: |
          TOKEN=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
            -H "Content-Type: application/json" \
            -d '{
                  "client_id": "${{ secrets.XRAY_CLIENT_ID }}",
                  "client_secret": "${{ secrets.XRAY_CLIENT_SECRET }}"
                }')
          echo "Xray token: $TOKEN"
          echo "XRAY_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Publish results to Xray
        run: |
          TEST_EXECUTION_KEY=""  # default as empty string

          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TEST_EXECUTION_KEY="MAIN-${GITHUB_SHA}"

            # Create Test Execution if it doesn't exist
            CREATE_EXECUTION_RESPONSE=$(curl -s -X GET \
              -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              "https://gfitn.atlassian.net/rest/api/2/issue/${TEST_EXECUTION_KEY}")

            if echo "$CREATE_EXECUTION_RESPONSE" | grep -q '"errorMessages":'; then
              echo "Test Execution ${TEST_EXECUTION_KEY} does not exist. Creating..."
              RESPONSE=$(curl -s -X POST \
                -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d '{
                      "fields": {
                        "project": { "key": "DEV" },
                        "summary": "[AUTO] Test Execution for main branch - ${GITHUB_SHA}",
                        "issuetype": { "name": "Test Execution" }
                      }
                    }' \
                "https://gfitn.atlassian.net/rest/api/2/issue")

              TEST_EXECUTION_KEY=$(echo "$RESPONSE" | jq -r '.key')

              if [[ "$TEST_EXECUTION_KEY" == "null" || -z "$TEST_EXECUTION_KEY" ]]; then
                echo "Error: Failed to create Test Execution."
                echo "Response: $RESPONSE"
                exit 1
              fi
              echo "New Test Execution created: $TEST_EXECUTION_KEY"
            else
              echo "Test Execution ${TEST_EXECUTION_KEY} already exists."
            fi
          elif [[ "${GITHUB_REF}" == "refs/heads/feature/"* ]] || [[ "${GITHUB_REF}" == "refs/heads/test/"* ]]; then
            TEST_EXECUTION_KEY="DEV-${GITHUB_REF##*/}"
          fi

          # Upload test results
          curl -X POST \
            -u ${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} \
            -H "Content-Type: multipart/form-data" \
            -F "file=@results.xml" \
            -F "projectKey=DEV" \
            -F "testExecutionKey=${TEST_EXECUTION_KEY}" \
            "https://gfitn.atlassian.net/api/v2/import/execution/junit" \
            -v

      - name: Send report to Telegram
        if: always()
        run: |
          STATUS="Success"
          if [ ${{ steps.test.conclusion }} != "success" ]; then
            STATUS="Failed"
          fi
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "473468570",
              "text": "Playwright Tests: *'${STATUS}'*\nRepository: '${{ github.repository }}'\nBranch: '${{ github.ref_name }}'\nJob URL: '${{ github.run_url }}'",
              "parse_mode": "Markdown"
            }'
