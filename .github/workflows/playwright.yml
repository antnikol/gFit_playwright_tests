name: Playwright Tests
on:
  push:
    branches: [main, feature/**, test/**]
  pull_request:
    branches: [main, feature/**, test/**]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm ci
          if [ $? -ne 0 ]; then
            echo "Error: Failed to install dependencies."
            exit 1
          fi

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Create report directory
        run: mkdir -p playwright-report

      - name: Run Playwright tests
        run: npx playwright test --output=playwright-report
        env:
          CI: true

      - name: List files in playwright-report before uploading to Xray
        run: ls -l playwright-report

      - name: Verify test results
        run: |
          if [ ! -f playwright-report/test-results.xml ]; then
            echo "Error: Test results file not found in playwright-report/test-results.xml!"
            exit 1
          elif [ ! -s playwright-report/test-results.xml ]; then
            echo "Error: Test results file is empty!"
            exit 1
          else
            echo "Test results file verified: playwright-report/test-results.xml"
          fi

      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.XRAY_CLIENT_ID }}" ] || [ -z "${{ secrets.XRAY_CLIENT_SECRET }}" ]; then
            echo "Error: Missing Xray API credentials."
            exit 1
          fi
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] || [ -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            echo "Error: Missing Telegram API credentials."
            exit 1
          fi

      - name: Get Xray API Token
        run: |
          TOKEN=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
            -H "Content-Type: application/json" \
            -d '{
                  "client_id": "${{ secrets.XRAY_CLIENT_ID }}",
                  "client_secret": "${{ secrets.XRAY_CLIENT_SECRET }}"
                }' | tr -d '"')
          if [ -z "$TOKEN" ]; then
            echo "Error: Failed to retrieve Xray token."
            exit 1
          fi
          echo "XRAY_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Publish results to Xray
        run: |
          TEST_EXECUTION_KEY="DEV-112"  # default for main_branch
          # if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
          #   TEST_EXECUTION_KEY="DEV-${GITHUB_SHA}"
          if [[ "${GITHUB_REF}" == "refs/heads/feature/"* ]] || [[ "${GITHUB_REF}" == "refs/heads/test/"* ]]; then
            TEST_EXECUTION_KEY="DEV-${GITHUB_REF##*/}"
          fi

          # Check if Test Execution exists in Xray
          CREATE_EXECUTION_RESPONSE=$(curl -s -X GET \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://gfitn.atlassian.net/rest/api/2/issue/${TEST_EXECUTION_KEY}")

          # If Test Execution does not exist, create it
          if echo "$CREATE_EXECUTION_RESPONSE" | grep -q '"errorMessages":'; then
            echo "Test Execution ${TEST_EXECUTION_KEY} does not exist. Creating..."
            RESPONSE=$(curl -s -X POST \
              -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                    "fields": {
                      "project": { "key": "DEV" },
                      "summary": "[AUTO] Test Execution FEATURE/TESTS '${GITHUB_REF##*/}'",
                      "issuetype": { "name": "Test Execution" }
                    }
                  }' \
              "https://gfitn.atlassian.net/rest/api/2/issue")

            TEST_EXECUTION_KEY=$(echo "$RESPONSE" | jq -r '.key')

            if [[ "$TEST_EXECUTION_KEY" == "null" || -z "$TEST_EXECUTION_KEY" ]]; then
              echo "Error: Failed to create Test Execution."
              echo "Response: $RESPONSE"
              exit 1
            fi
            echo "New Test Execution created: $TEST_EXECUTION_KEY"
          else
            echo "Test Execution ${TEST_EXECUTION_KEY} already exists."
          fi

          # UPLOAD JUnit XML results
          curl -X POST \
            -H "Authorization: Bearer ${{ env.XRAY_TOKEN }}" \
            -H "Content-Type: text/xml" \
            --data @"playwright-report/test-results.xml" \
            "https://eu.xray.cloud.getxray.app/api/v2/import/execution/junit?projectKey=DEV&testExecKey=${TEST_EXECUTION_KEY}&testPlanKey=DEV-129"

            # -H "Authorization: Bearer ${{ env.XRAY_TOKEN }}" \
            # -H "Content-Type: multipart/form-data" \
            # -F "file=@playwright-report/test-results.xml" \
            # -F "projectKey=DEV" \
            # -F "testExecutionKey=${TEST_EXECUTION_KEY}" \
            # "https://eu.xray.cloud.getxray.app/api/v1/import/execution/junit" \
            # --verbose

            # "https://eu.xray.cloud.getxray.app/api/v1/import/execution/junit?projectKey=DEV&testExecutionKey=${TEST_EXECUTION_KEY}&testPlanKey=DEV-87&revision=v1.0.0" \
            # XML_FILE_PATH="playwright-report/test-results.xml"

            # curl -H "Content-Type: text/xml" -X POST \
            #   -H "Authorization: Bearer $XRAY_TOKEN" \
            #   --data @"playwright-report/test-results.xml" \
            #   https://eu.xray.cloud.getxray.app/api/v1/import/execution/junit?projectKey=DEV&testExecKey=DEV-112&testPlanKey=DEV-87&revision=v1.0.0

            # curl -X POST \
            #   -H "Authorization: Bearer $XRAY_TOKEN" \
            #   -H "Content-Type: text/xml" \
            #   --data @"$XML_FILE_PATH" \
            #   "https://eu.xray.cloud.getxray.app/api/v1/import/execution/junit?projectKey=DEV&testExecutionKey=${TEST_EXECUTION_KEY}&testPlanKey=DEV-87&revision=v1.0.0" \
            #   -v

      - name: Debug GitHub context
        run: |
          echo "GITHUB_CONTEXT: ${{ toJson(github) }}"

      - name: Send report to Telegram
        if: always()
        run: |
          # Отримуємо час початку виконання тесту з GitHub Actions (якщо змінна порожня, використовуємо поточний час)
          START_TIME="${{ github.run_started_at }}"
          if [ -z "$START_TIME" ]; then
            START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")  # Якщо порожнє, використовуємо поточний час
            echo "START_TIME was empty, using current time: $START_TIME"
          else
            echo "START_TIME: $START_TIME"
          fi

          # Отримуємо поточний час (час закінчення виконання тестів)
          END_TIME=$(date -u +"%s")
          echo "END_TIME: $END_TIME"

          # Перетворення часу початку у секунди
          START_TIME_SECONDS=$(date -d "$START_TIME" +%s)
          echo "START_TIME_SECONDS: $START_TIME_SECONDS"

          # Обчислюємо тривалість виконання тесту
          DURATION=$((END_TIME - START_TIME_SECONDS))
          echo "DURATION (seconds): $DURATION"

          # Форматуємо тривалість у форматі ЧЧ:ХХ:СС
          DURATION_FORMATTED=$(date -u -d @${DURATION} +"%H:%M:%S")
          echo "DURATION_FORMATTED: $DURATION_FORMATTED"

          # Статус тесту
          STATUS="success"  # Ви можете змінювати статус в залежності від результату тестів
          echo "STATUS: $STATUS"

          # URL задачі на GitHub, використовуємо динамічні змінні для правильного формування URL
          JOB_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Job URL: $JOB_URL"

          # Надсилаємо повідомлення в Telegram
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "Playwright Tests: *'${STATUS}'*\nRepository: '${{ github.repository }}'\nBranch: '${{ github.ref_name }}'\nDuration: '${DURATION_FORMATTED}'\nJob URL: '${JOB_URL}'",
              "parse_mode": "Markdown"
            }'
