name: Playwright Tests
on:
  push:
    branches: [main, feature/**, test/**]
  pull_request:
    branches: [main, feature/**, test/**]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Create report directory
        run: mkdir -p playwright-report

      - name: Run Playwright tests
        run: npx playwright test --output=playwright-report
        env:
          CI: true

      - name: List files in playwright-report before uploading to Xray
        run: ls -l playwright-report

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Get Xray API Token
        run: |
          TOKEN=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v1/authenticate" \
            -H "Content-Type: application/json" \
            -d '{
                  "client_id": "${{ secrets.XRAY_CLIENT_ID }}",
                  "client_secret": "${{ secrets.XRAY_CLIENT_SECRET }}"
                }')
          echo "Xray token: $TOKEN"
          echo "XRAY_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Publish results to Xray
        run: |
          TEST_EXECUTION_KEY="DEV-112"  # default for main_branch
          if [[ "${GITHUB_REF}" == "refs/heads/feature/"* ]]; then
            TEST_EXECUTION_KEY="DEV-${GITHUB_REF##*/}"
          elif [[ "${GITHUB_REF}" == "refs/heads/test/"* ]]; then
            TEST_EXECUTION_KEY="DEV-${GITHUB_REF##*/}"
          fi

          # Check if Test Execution exists in Xray
          CREATE_EXECUTION_RESPONSE=$(curl -s -X GET \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://gfitn.atlassian.net/rest/api/2/issue/${TEST_EXECUTION_KEY}")

          # If Test Execution does not exist, create it
          if echo "$CREATE_EXECUTION_RESPONSE" | grep -q '"errorMessages":'; then
            echo "Test Execution ${TEST_EXECUTION_KEY} does not exist. Creating..."
            RESPONSE=$(curl -s -X POST \
              -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                    "fields": {
                      "project": { "key": "DEV" },
                      "summary": "[AUTO] Test Execution '${GITHUB_REF##*/}'",
                      "issuetype": { "name": "Test Execution" }
                    }
                  }' \
              "https://gfitn.atlassian.net/rest/api/2/issue")

            TEST_EXECUTION_KEY=$(echo "$RESPONSE" | jq -r '.key')

            if [[ "$TEST_EXECUTION_KEY" == "null" || -z "$TEST_EXECUTION_KEY" ]]; then
              echo "Error: Failed to create Test Execution."
              echo "Response: $RESPONSE"
              exit 1
            fi
            echo "New Test Execution created: $TEST_EXECUTION_KEY"
          else
            echo "Test Execution ${TEST_EXECUTION_KEY} already exists."
          fi

          # Prepare JUnit XML results
          XML_FILE_PATH="playwright-report/test-results.xml"
          curl -H "Content-Type: text/xml" -X POST \
            -H "Authorization: Bearer $XRAY_TOKEN" \
            --data @"playwright-report/test-results.xml" \
            https://xray.cloud.getxray.app/api/v1/import/execution/junit?projectKey=DEV&testExecKey=DEV-112&testPlanKey=DEV-12&revision=v1.0.0

          # curl -X POST \
          #   -H "Authorization: Bearer $XRAY_TOKEN" \
          #   -H "Content-Type: text/xml" \
          #   --data @"$XML_FILE_PATH" \
          #   "https://xray.cloud.getxray.app/api/v1/import/execution/junit?projectKey=DEV&testExecutionKey=${TEST_EXECUTION_KEY}&testPlanKey=DEV-12&revision=v1.0.0" \
          #   -v

      - name: Send report to Telegram
        if: always()
        run: |
          STATUS="Success"
          if [ ${{ steps.test.outcome }} != "success" ]; then
            STATUS="Failed"
          fi
          echo "Job URL: ${{ github.run_url }}"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "Playwright Tests: *'${STATUS}'*\nRepository: '${{ github.repository }}'\nBranch: '${{ github.ref_name }}'\nJob URL: '${{ github.run_url }}'",
              "parse_mode": "Markdown"
            }'
