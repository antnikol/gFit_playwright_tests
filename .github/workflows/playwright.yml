name: Playwright Tests

permissions:
  contents: write

on:
  push:
    branches: [main, feature/**, test/**]
  pull_request:
    branches: [main, feature/**, test/**]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "GITHUB_REF=${GITHUB_REF}" >> $GITHUB_ENV
          echo "REGISTRY_FILE=test_execution_registry.txt" >> $GITHUB_ENV

      - name: Set up GitHub token for push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm ci
          if [ $? -ne 0 ]; then
            echo "Error: Failed to install dependencies."
            exit 1
          fi

      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Create report directory
        run: mkdir -p playwright-report

      - name: Run Playwright tests
        run: npx playwright test --output=playwright-report
        env:
          CI: true

      - name: List files in playwright-report before uploading to Xray
        run: ls -l playwright-report

      - name: Verify test results
        run: |
          if [ ! -f playwright-report/test-results.xml ]; then
            echo "Error: Test results file not found in playwright-report/test-results.xml!"
            exit 1
          elif [ ! -s playwright-report/test-results.xml ]; then
            echo "Error: Test results file is empty!"
            exit 1
          else
            echo "Test results file verified: playwright-report/test-results.xml"
          fi

      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.XRAY_CLIENT_ID }}" ] || [ -z "${{ secrets.XRAY_CLIENT_SECRET }}" ]; then
            echo "Error: Missing Xray API credentials."
            exit 1
          fi
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] || [ -z "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            echo "Error: Missing Telegram API credentials."
            exit 1
          fi

      - name: Get Xray API Token
        run: |
          TOKEN=$(curl -s -X POST "https://xray.cloud.getxray.app/api/v2/authenticate" \
            -H "Content-Type: application/json" \
            -d '{
                  "client_id": "${{ secrets.XRAY_CLIENT_ID }}",
                  "client_secret": "${{ secrets.XRAY_CLIENT_SECRET }}"
                }' | tr -d '"')
          if [ -z "$TOKEN" ]; then
            echo "Error: Failed to retrieve Xray token."
            exit 1
          fi
          echo "XRAY_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Publish results to Xray
        run: |
          REGISTRY_FILE="test_execution_registry.txt"
          # Create the file if it doesn't exist
          if [ ! -f "$REGISTRY_FILE" ]; then
            touch "$REGISTRY_FILE"
          fi

          # Lock the file for writing (to prevent concurrent writes)
          exec 200>"$REGISTRY_FILE".lock
          flock -n 200 || { echo "Failed to acquire lock on $REGISTRY_FILE"; exit 1; }

          # Check if the branch has a saved TEST_EXECUTION_KEY
          BRANCH_NAME="${GITHUB_REF##*/}"
          TEST_EXECUTION_KEY=$(grep "^${BRANCH_NAME} " "$REGISTRY_FILE" | awk '{print $2}')

          if [[ -z "$TEST_EXECUTION_KEY" ]]; then
            echo "No Test Execution Key found for branch $BRANCH_NAME. Checking Xray..."

            # Create a new Test Execution in Xray
            RESPONSE=$(curl -s -X POST \
              -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                    "fields": {
                      "project": { "key": "DEV" },
                      "summary": "[AUTO] Test Execution '${BRANCH_NAME}'",
                      "issuetype": { "name": "Test Execution" }
                    }
                  }' \
              "https://gfitn.atlassian.net/rest/api/2/issue")

            TEST_EXECUTION_KEY=$(echo "$RESPONSE" | jq -r '.key')

            if [[ "$TEST_EXECUTION_KEY" == "null" || -z "$TEST_EXECUTION_KEY" ]]; then
              echo "Error: Failed to create Test Execution."
              echo "Response: $RESPONSE"
              exit 1
            fi

            echo "New Test Execution created: $TEST_EXECUTION_KEY"

            # Save the new key to the registry
            echo "${BRANCH_NAME} ${TEST_EXECUTION_KEY}" >> "$REGISTRY_FILE"
          else
            echo "Found existing Test Execution Key for branch $BRANCH_NAME: $TEST_EXECUTION_KEY"
          fi

          # Release the lock after writing
          exec 200>&-

          # Use the TEST_EXECUTION_KEY for further steps
          echo "Using Test Execution Key: $TEST_EXECUTION_KEY"

      - name: Debug git remote configuration
        run: |
          git remote -v
          git config --list

      - name: Pull latest changes
        run: |
          git fetch origin
          git reset --hard origin/${GITHUB_REF##*/}

      - name: Commit and push changes to registry file
        run: |
          git add test_execution_registry.txt
          git commit -m "Update test execution registry"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} $GITHUB_REF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: UPLOAD JUnit XML results
        run: |
          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer ${{ env.XRAY_TOKEN }}" \
            -H "Content-Type: text/xml" \
            --data @"playwright-report/test-results.xml" \
            "https://eu.xray.cloud.getxray.app/api/v2/import/execution/junit?projectKey=DEV&testExecKey=${TEST_EXECUTION_KEY}&testPlanKey=DEV-129")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          ERROR_MESSAGE=$(echo "$RESPONSE" | head -n -1)

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "Error: Failed to upload test results to Xray. HTTP Status: $HTTP_CODE"
            echo "Response: $ERROR_MESSAGE"

            # Send error message to Telegram
            curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -H "Content-Type: application/json" \
              -d '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "Error uploading test results to Xray. HTTP Status: '${HTTP_CODE}'\nDetails: '${ERROR_MESSAGE}'\nJob URL: https://github.com/antnikol/gFit\_playwright\_tests/actions/runs/${{ github.run_id }}",
                "parse_mode": "Markdown"
              }'

            exit 1
          else
            echo "Test results uploaded successfully to Xray."
          fi

      - name: Debug GitHub context
        run: |
          echo "GITHUB_CONTEXT: ${{ toJson(github) }}"

      - name: Send report to Telegram
        if: always()
        run: |
          echo "START_TIME: $START_TIME"
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          START_TIME_SECONDS=$(date -d "$START_TIME" +%s)
          END_TIME_SECONDS=$(date -d "$END_TIME" +%s)
          DURATION=$((END_TIME_SECONDS - START_TIME_SECONDS))
          DURATION_FORMATTED=$(printf "%02d:%02d:%02d" $((DURATION / 3600)) $(((DURATION % 3600) / 60)) $((DURATION % 60)))
          echo "Duration: $DURATION_FORMATTED"

          STATUS="success"

          PASSED=$(xmllint --xpath "string(//testsuite/@tests)" playwright-report/test-results.xml)
          FAILED=$(xmllint --xpath "string(//testsuite/@failures)" playwright-report/test-results.xml)
          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV

          JOB_URL="https://github.com/antnikol/gFit\_playwright\_tests/actions/runs/${{ github.run_id }}"
          TOTAL=$(xmllint --xpath "string(//testsuite/@tests)" playwright-report/test-results.xml)

          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "Playwright Tests: *'${STATUS}'*\nRepository: antnikol/gFit\\_playwright\\_tests\nBranch: '${{ github.ref_name }}'\nTest duration: '${DURATION_FORMATTED}'\nTests: '${TOTAL}'\nPassed: '${PASSED}'\nFailed: '${FAILED}'\nJob URL: https://github.com/antnikol/gFit\\_playwright\\_tests/actions/runs/'${{ github.run_id }}'",
              "parse_mode": "Markdown"
            }'
        env:
          START_TIME: ${{ env.START_TIME }}
